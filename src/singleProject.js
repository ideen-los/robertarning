import './scss/project-page.scss';
import externalLinkIcon from './img/external-link.svg';
import arrowLeft from './img/arrow-left.svg';
import { loadData } from './data';
import {
  convertToURLSaveName,
  pushURLAndCallRouter,
  setBodyClass,
  setContent,
} from './helperFunctions';
import { showMoreProjects } from './moreProjects';
import { initializeBackHomeLink, showPageNotFound } from './404';

/* 
Bundles and returns all of the HTML code for a single project.
The HTML code is generated by the functions beneath this one.
*/
export const showSingleProject = async function (project) {
  // Check whether project data is available
  if (!project) {
    console.error('No project data available.');
    return '';
  }

  // Generate the HTML code for the project page
  const projectLink = generateProjectLink(project);
  const usedSkills = generateUsedSkills(project);
  const projectMediaElements = generateProjectMediaElements(project);
  const moreProjects = await showMoreProjects(project);
  const allProjectsLink = generateAllProjectsLink();

  return `<div id="${project.id}" class="single-project"><div class="project-title-and-link"><h2>${project.projectName}</h2>${projectLink}</div><section class="skills-and-tools"><span>Skills:</span><ul>${usedSkills}</ul></section><section class="media-elements">${projectMediaElements}</section>${moreProjects}${allProjectsLink}</div>`;
};

/* 
Generates a link to the project's live website if the property exists.
*/
const generateProjectLink = function (project) {
  if (project.live_site) {
    return `<a href="${project.live_site}"><span>Live-Seite besuchen</span><img src="${externalLinkIcon}"></a>`;
  } else {
    return '';
  }
};

/* 
Gnerates the HTML for a list of skills used for a specific project.
*/
const generateUsedSkills = function (project) {
  if (project.skills) {
    const projectSkills = project.skills
      .map((skill) => {
        return `<li class="skill-tag">${skill}</li>`;
      })
      .join('');

    return projectSkills;
  } else {
    return '';
  }
};

/* 
Generates the HTML for the [elements] array in the project object,
which contains references to all media files used by the project.
*/
const generateProjectMediaElements = function (project) {
  if (project.elements) {
    const projectElements = project.elements
      .map((element) => {
        switch (element.type) {
          case 'video':
            return `<div class="${element.type} ${element.version || ''}">
            <video class="${
              element.above_fold ? '' : 'media lazy-load'
            }" autoplay muted loop playsinline>
              <source ${
                element.above_fold ? `src="${element.content}"` : `data-src="${element.content}"`
              } type="video/mp4">
            </video>
            </div>`;
          case 'image':
            return `<div class="${element.type} ${element.version || ''}">
            <img class="${element.above_fold ? '' : 'media lazy-load'}" ${
              element.above_fold ? `src="${element.content}"` : `data-src="${element.content}"`
            }">
            </div>`;
          case 'text':
            return `<div class="${element.type}">
            ${element.content}
            </div>`;
          case 'comment':
            return `<div class="${element.type}">
            <p>${element.content}</p>
            </div>`;
          case 'two-column':
            // Iterates over the [elements] array, which contains references to media files
            const twoColumnElements = element.content
              .map((media) => {
                if (media.type === 'video') {
                  return `<div class="${media.type} ${media.version || ''}">
                  <video class="media lazy-load" autoplay muted loop playsinline>
                    <source data-src="${media.content}" type="video/mp4">
                  </video>
                  </div>`;
                } else if (media.type === 'image') {
                  return `<div class="${media.type} ${element.version || ''}">
                  <img class="media lazy-load" data-src="${media.content}">
                  </div>`;
                } else {
                  return `<p>Unsupported media format.</p>`;
                }
              })
              .join('');

            return `<div class ="${element.type}">
            ${twoColumnElements}
            </div>`;
          case 'codepen':
            return `<div class="${element.type}"><iframe height="700" style="width: 100%;" scrolling="no" title="${element.title}" src="${element.embed_url}?default-tab=result&theme-id=dark&resizable=true" frameborder="no" loading="lazy" allowtransparency="true" allowfullscreen="true">
            See the Pen <a href="${element.url}">
            ${element.title}</a> by ideen-los (<a href="https://codepen.io/ideen-los">@ideen-los</a>)
            on <a href="https://codepen.io">CodePen</a>.
            </iframe><span>drag to resize</span></div>`;
        }
      })
      .join('');

    return projectElements;
  } else {
    return '';
  }
};

/* 
Generates HTML for a section that displays a link back to the homepage.
*/
const generateAllProjectsLink = function () {
  return `<section class="all-projects-link"><a href="/"><img src="${arrowLeft}"><h2>Alle Projekte</h2></a></section>`;
};

export const handleAllProjectsLink = function () {
  const allProjectsLink = document.querySelector('.all-projects-link a');

  allProjectsLink.addEventListener('click', (e) => {
    e.preventDefault();
    pushURLAndCallRouter('');
  });
};

/* 
1. Tries to find a project by it's name by comparing the path passed as a parameter
with the names of the projects in the data pool. Then it calls showSingleProject() 
and returns the project's name.

2. Has no project been found, the function returns '404', which is handled by router() in router.js.
*/
export const loadSingleProject = async function (path) {
  const projectName = path.split('/')[1]; // Assuming paths like "/path"
  const data = await loadData();
  const project = data.projects.elements.find(
    (project) => convertToURLSaveName(project.projectName) === projectName
  );

  if (project) {
    try {
      // Generate HTML
      const HTMLContent = await showSingleProject(project);
      setContent('content', HTMLContent);
      // Set body class to project id
      setBodyClass(`project-id-${project.id}`);
      // Return the project's name
      // Will be set as the document.title
      return project.projectName;
    } catch (error) {
      console.error('Failed to load project details:', error);
      setContent('content', showPageNotFound());
      initializeBackHomeLink();
      setBodyClass('not-found');
      return '404';
    }
  } else {
    setContent('content', showPageNotFound());
    initializeBackHomeLink();
    setBodyClass('not-found');
    return '404';
  }
};
