{"version":3,"file":"537.e50fd9354a337b80b189.js","mappings":"qMAGA,MA0BaA,EAAmBC,eAAgBC,GAC9C,MAAM,gBAAEC,EAAe,YAAEC,SA3BQH,eAAgBC,GACjD,MAAMG,QAAa,SAEnB,IACE,IAAKA,IAASH,EAEZ,MAAO,GAGT,MAAMI,EAAcD,EAAKE,SAASC,SAC5BC,EAAsBC,OAAOR,EAAQS,IAAM,EAG3CP,EAAcE,GADMG,EAAsB,GAAKH,EAAYM,QAOjE,MAAO,CAAET,gBAFeG,GADrBG,EAAsB,EAAIH,EAAYM,QAAUN,EAAYM,QAGrCR,cAC5B,CAAE,MAAOS,GAEP,MAAO,EACT,CACF,CAGiDC,CAA2BZ,GAE1E,IACE,IAAKC,IAAoBC,EAEvB,MAAO,GAGT,MAAMW,GAAyB,IAAAC,sBAAqBb,EAAgBc,aAC9DC,GAAqB,IAAAF,sBAAqBZ,EAAYa,aAE5D,MAAO,qGAAqGF,kEAAuFZ,EAAgBgB,iCAAiCD,8DAA+Ed,EAAYe,sCACjV,CAAE,MAAON,GAEP,MAAO,EACT,CACF,EAEaO,EAA0B,WACrC,MAAMC,EAAsBC,SAASC,cAAc,qBAC7CC,EAAkBF,SAASC,cAAc,iBAEzCR,EAAyBM,EAAoBI,KAAKC,MAAM,KAAK,GAC7DR,EAAqBM,EAAgBC,KAAKC,MAAM,KAAK,GAE3DL,EAAoBM,iBAAiB,SAAUC,IAC7CA,EAAEC,kBACF,IAAAC,sBAAqBf,EAAuB,IAG9CS,EAAgBG,iBAAiB,SAAUC,IACzCA,EAAEC,kBACF,IAAAC,sBAAqBZ,EAAmB,GAE5C,C,iCC7DO,MAAMa,EAA4B,WACvC,IACE,MAAMC,EAAO,eAGb,OAFAC,eAAeC,QAAQF,EAAMA,GAC7BC,eAAeE,WAAWH,IACnB,CACT,CAAE,MAAOJ,GACP,OAAO,CACT,CACF,ECNaQ,EAAWnC,iBAEtB,IAAII,EAEJ,GAAI0B,EAA2B,CAE7B,MAAMM,EAAaC,KAAKC,MAAMN,eAAeO,QAAQ,SAErD,GAAIH,EAKF,OAFAhC,EAAOgC,EAEAhC,CAEX,CAIA,IAEE,MAAMoC,QAAiBC,MAAM,mBAC7B,IAAKD,EAASE,GAEZ,MAAM,IAAIC,MAAM,uBAAuBH,EAASI,UAWlD,OARAxC,QAAaoC,EAASK,OAIlBf,GACFE,eAAeC,QAAQ,OAAQI,KAAKS,UAAU1C,IAGzCA,CACT,CAAE,MAAOQ,GAEP,OAAO,IACT,CACF,C","sources":["webpack://robertarning/./src/moreProjects.js","webpack://robertarning/./src/sessionStorage.js","webpack://robertarning/./src/data.js"],"sourcesContent":["import { loadData } from './data';\nimport { convertToURLSaveName, pushURLAndCallRouter } from './helperFunctions';\n\nconst findPreviousAndNextProject = async function (project) {\n  const data = await loadData();\n\n  try {\n    if (!data || !project) {\n      console.error('No data or project available');\n      return '';\n    }\n\n    const allProjects = data.projects.elements;\n    const currentProjectIndex = Number(project.id) - 1;\n\n    const nextProjectIndex = (currentProjectIndex + 1) % allProjects.length;\n    const nextProject = allProjects[nextProjectIndex];\n\n    const previousProjectIndex =\n      (currentProjectIndex - 1 + allProjects.length) % allProjects.length;\n    const previousProject = allProjects[previousProjectIndex];\n\n    return { previousProject, nextProject };\n  } catch (error) {\n    console.error('Failed to load data', error);\n    return '';\n  }\n};\n\nexport const showMoreProjects = async function (project) {\n  const { previousProject, nextProject } = await findPreviousAndNextProject(project);\n\n  try {\n    if (!previousProject || !nextProject) {\n      console.error('No data on previous and next project available');\n      return '';\n    }\n\n    const previousProjectURLPath = convertToURLSaveName(previousProject.projectName);\n    const nextProjectURLPath = convertToURLSaveName(nextProject.projectName);\n\n    return `<section class=\"more-projects\"><h2>Mehr Projekte</h2><div class=\"more-projects-wrapper\"><a href=\"/${previousProjectURLPath}\" class=\"previous-project\"><div style=\"background-image: url('${previousProject.image}');\"></div></a><a href=\"/${nextProjectURLPath}\" class=\"next-project\"><div style=\"background-image: url('${nextProject.image}');\"></div></a></div></section>`;\n  } catch (error) {\n    console.error('Failed to load data', error);\n    return '';\n  }\n};\n\nexport const handleMoreProjectsLinks = function () {\n  const previousProjectLink = document.querySelector('.previous-project');\n  const nextProjectLink = document.querySelector('.next-project');\n\n  const previousProjectURLPath = previousProjectLink.href.split('/')[3];\n  const nextProjectURLPath = nextProjectLink.href.split('/')[3];\n\n  previousProjectLink.addEventListener('click', (e) => {\n    e.preventDefault();\n    pushURLAndCallRouter(previousProjectURLPath);\n  });\n\n  nextProjectLink.addEventListener('click', (e) => {\n    e.preventDefault();\n    pushURLAndCallRouter(nextProjectURLPath);\n  });\n};\n","/*\nTests if sessionStorage is available in the users browser\n*/\nexport const isSessionStorageAvailable = function () {\n  try {\n    const test = 'test-storage';\n    sessionStorage.setItem(test, test);\n    sessionStorage.removeItem(test);\n    return true;\n  } catch (e) {\n    return false;\n  }\n};\n","import { isSessionStorageAvailable } from './sessionStorage';\n\n/* \nLoads a JSON file with all data from the server and saves it\nto sessionStorage if available, so the data is cached for further use.\n*/\nexport const loadData = async function () {\n  console.log('Initializing...');\n  let data;\n\n  if (isSessionStorageAvailable) {\n    console.log('sessionStorage available...');\n    const storedData = JSON.parse(sessionStorage.getItem('data'));\n\n    if (storedData) {\n      // Gets the data from sessionStorage\n      console.log('Loaded projects from sessionStorage');\n      data = storedData;\n      console.log(data);\n      return data;\n    }\n  }\n\n  // No sessionStorage available or no data in sessionStorage:\n  // fetch the data.json from the server\n  try {\n    console.log('Getting data...');\n    const response = await fetch('/data/data.json');\n    if (!response.ok) {\n      // Check if the HTTP status code is in the 200-299 range\n      throw new Error(`HTTP error! Status: ${response.status}`);\n    }\n\n    data = await response.json();\n    console.log(data);\n\n    // Save fetched data to sessionStorage\n    if (isSessionStorageAvailable) {\n      sessionStorage.setItem('data', JSON.stringify(data));\n      console.log('Saved data to sessionStorage');\n    }\n    return data;\n  } catch (error) {\n    console.error('Failed to load data:', error);\n    return null;\n  }\n};\n"],"names":["showMoreProjects","async","project","previousProject","nextProject","data","allProjects","projects","elements","currentProjectIndex","Number","id","length","error","findPreviousAndNextProject","previousProjectURLPath","convertToURLSaveName","projectName","nextProjectURLPath","image","handleMoreProjectsLinks","previousProjectLink","document","querySelector","nextProjectLink","href","split","addEventListener","e","preventDefault","pushURLAndCallRouter","isSessionStorageAvailable","test","sessionStorage","setItem","removeItem","loadData","storedData","JSON","parse","getItem","response","fetch","ok","Error","status","json","stringify"],"sourceRoot":""}